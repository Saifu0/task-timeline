{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { GoogleSpreadsheet } from 'google-spreadsheet';\n\nconst result = require('dotenv').config();\n\nconsole.log(result);\nconst SPREADSHEET_ID = process.env.SPREADSHEET_ID;\nconst SHEET_ID = 0;\nconst CLIENT_EMAIL = process.env.CLIENT_EMAIL;\nconst PRIVATE_KEY = process.env.PRIVATE_KEY;\nconst doc = new GoogleSpreadsheet(SPREADSHEET_ID);\nexport const appendSpreadsheet = async row => {\n  _s();\n\n  try {\n    await doc.useServiceAccountAuth({\n      client_email: CLIENT_EMAIL,\n      private_key: PRIVATE_KEY\n    }); // loads document properties and worksheets\n\n    await doc.loadInfo();\n    const sheet = doc.sheetsById[SHEET_ID];\n    const data = await sheet.getRows();\n    const result = await sheet.addRow(row); // console.log(sheet);\n\n    console.log('[DATA]', data);\n  } catch (e) {\n    console.log('Error: ', e);\n  }\n};\n\n_s(appendSpreadsheet, \"XzZzjmf42T4ghIIVsLcPZIIQRXQ=\", false, function () {\n  return [doc.useServiceAccountAuth];\n});\n\nexport const getSpreadsheet = async () => {\n  _s2();\n\n  try {\n    await doc.useServiceAccountAuth({\n      client_email: CLIENT_EMAIL,\n      private_key: PRIVATE_KEY\n    }); // loads document properties and worksheets\n\n    await doc.loadInfo();\n    const sheet = doc.sheetsById[SHEET_ID];\n    return await sheet.getRows();\n  } catch (e) {\n    console.log('Error: ', e);\n  }\n};\n\n_s2(getSpreadsheet, \"XzZzjmf42T4ghIIVsLcPZIIQRXQ=\", false, function () {\n  return [doc.useServiceAccountAuth];\n});","map":{"version":3,"sources":["/home/saifu/Documents/pikkal/saifur-timeline/src/data/GoogleSheetAPI.js"],"names":["GoogleSpreadsheet","result","require","config","console","log","SPREADSHEET_ID","process","env","SHEET_ID","CLIENT_EMAIL","PRIVATE_KEY","doc","appendSpreadsheet","row","useServiceAccountAuth","client_email","private_key","loadInfo","sheet","sheetsById","data","getRows","addRow","e","getSpreadsheet"],"mappings":";;;AAAA,SAAQA,iBAAR,QAAgC,oBAAhC;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB,EAAf;;AAEAC,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AAEA,MAAMK,cAAc,GAAGC,OAAO,CAACC,GAAR,CAAYF,cAAnC;AACA,MAAMG,QAAQ,GAAG,CAAjB;AACA,MAAMC,YAAY,GAAGH,OAAO,CAACC,GAAR,CAAYE,YAAjC;AACA,MAAMC,WAAW,GAAGJ,OAAO,CAACC,GAAR,CAAYG,WAAhC;AAEA,MAAMC,GAAG,GAAG,IAAIZ,iBAAJ,CAAsBM,cAAtB,CAAZ;AAEA,OAAO,MAAMO,iBAAiB,GAAG,MAAOC,GAAP,IAAe;AAAA;;AAC5C,MAAI;AACF,UAAMF,GAAG,CAACG,qBAAJ,CAA0B;AAC9BC,MAAAA,YAAY,EAAEN,YADgB;AAE9BO,MAAAA,WAAW,EAAEN;AAFiB,KAA1B,CAAN,CADE,CAKF;;AACA,UAAMC,GAAG,CAACM,QAAJ,EAAN;AAEA,UAAMC,KAAK,GAAGP,GAAG,CAACQ,UAAJ,CAAeX,QAAf,CAAd;AACA,UAAMY,IAAI,GAAG,MAAMF,KAAK,CAACG,OAAN,EAAnB;AACA,UAAMrB,MAAM,GAAG,MAAMkB,KAAK,CAACI,MAAN,CAAaT,GAAb,CAArB,CAVE,CAYF;;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBgB,IAArB;AAED,GAfD,CAeE,OAAOG,CAAP,EAAU;AACVpB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBmB,CAAvB;AACD;AACF,CAnBI;;GAAMX,iB;UAEDD,GAAG,CAACG,qB;;;AAmBhB,OAAO,MAAMU,cAAc,GAAG,YAAY;AAAA;;AACtC,MAAI;AACF,UAAMb,GAAG,CAACG,qBAAJ,CAA0B;AAC9BC,MAAAA,YAAY,EAAEN,YADgB;AAE9BO,MAAAA,WAAW,EAAEN;AAFiB,KAA1B,CAAN,CADE,CAKF;;AACA,UAAMC,GAAG,CAACM,QAAJ,EAAN;AAEA,UAAMC,KAAK,GAAGP,GAAG,CAACQ,UAAJ,CAAeX,QAAf,CAAd;AACA,WAAO,MAAMU,KAAK,CAACG,OAAN,EAAb;AACD,GAVD,CAUE,OAAOE,CAAP,EAAU;AACVpB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBmB,CAAvB;AACD;AACF,CAdI;;IAAMC,c;UAEDb,GAAG,CAACG,qB","sourcesContent":["import {GoogleSpreadsheet} from 'google-spreadsheet';\n\nconst result = require('dotenv').config();\n\nconsole.log(result);\n\nconst SPREADSHEET_ID = process.env.SPREADSHEET_ID;\nconst SHEET_ID = 0;\nconst CLIENT_EMAIL = process.env.CLIENT_EMAIL\nconst PRIVATE_KEY = process.env.PRIVATE_KEY;\n\nconst doc = new GoogleSpreadsheet(SPREADSHEET_ID);\n\nexport const appendSpreadsheet = async (row) => {\n    try {\n      await doc.useServiceAccountAuth({\n        client_email: CLIENT_EMAIL,\n        private_key: PRIVATE_KEY,\n      });\n      // loads document properties and worksheets\n      await doc.loadInfo();\n  \n      const sheet = doc.sheetsById[SHEET_ID];\n      const data = await sheet.getRows();\n      const result = await sheet.addRow(row);\n\n      // console.log(sheet);\n      console.log('[DATA]',data);\n\n    } catch (e) {\n      console.log('Error: ', e);\n    }\n  };\n\nexport const getSpreadsheet = async () => {\n    try {\n      await doc.useServiceAccountAuth({\n        client_email: CLIENT_EMAIL,\n        private_key: PRIVATE_KEY,\n      });\n      // loads document properties and worksheets\n      await doc.loadInfo();\n  \n      const sheet = doc.sheetsById[SHEET_ID];\n      return await sheet.getRows();\n    } catch (e) {\n      console.log('Error: ', e);\n    }\n  };\n\n"]},"metadata":{},"sourceType":"module"}